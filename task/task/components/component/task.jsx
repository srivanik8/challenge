/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/PzOljZ5n6Wj
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useEffect } from "react"
import { Card, CardHeader, CardContent } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { Button } from "@/components/ui/button"
import { Checkbox } from "@/components/ui/checkbox"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog"

export function Task() {
  const [darkMode, setDarkMode] = useState(false)
  const [tasks, setTasks] = useState({
    Srivani: [],
    Prem: [],
    Ashish: [],
    Manish: []
  })
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState(null)
  const [isAddModalOpen, setIsAddModalOpen] = useState(false)
  const [isEditModalOpen, setIsEditModalOpen] = useState(false)
  const [newTaskText, setNewTaskText] = useState("")
  const [editTaskText, setEditTaskText] = useState("")
  const [currentUser, setCurrentUser] = useState("")
  const [editingTask, setEditingTask] = useState(null)

  useEffect(() => {
    fetchTasks()
  }, [])

  const fetchTasks = async () => {
    setIsLoading(true)
    setError(null)
    try {
      const response = await fetch('/api/tasks')
      if (!response.ok) {
        throw new Error('Failed to fetch tasks')
      }
      const data = await response.json()
      setTasks(data)
    } catch (error) {
      console.error("Failed to fetch tasks:", error)
      setError('Failed to load tasks. Please try again later.')
    } finally {
      setIsLoading(false)
    }
  }

  const toggleTaskCompletion = async (name, id) => {
    const task = tasks[name].find(t => t.id === id)
    try {
      const response = await fetch('/api/tasks', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id, completed: !task.completed })
      })
      if (!response.ok) throw new Error('Failed to update task')
      fetchTasks()
    } catch (error) {
      console.error("Failed to toggle task completion:", error)
    }
  }

  const deleteTask = async (name, id) => {
    try {
      const response = await fetch(`/api/tasks?id=${id}`, { method: 'DELETE' })
      if (!response.ok) throw new Error('Failed to delete task')
      fetchTasks()
    } catch (error) {
      console.error("Failed to delete task:", error)
    }
  }

  const openAddTaskModal = (name) => {
    setCurrentUser(name)
    setIsAddModalOpen(true)
  }

  const closeAddTaskModal = () => {
    setIsAddModalOpen(false)
    setNewTaskText("")
    setCurrentUser("")
  }

  const addTask = async () => {
    if (newTaskText.trim() !== "") {
      try {
        const response = await fetch('/api/tasks', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ user: currentUser, text: newTaskText })
        })
        if (!response.ok) throw new Error('Failed to add task')
        closeAddTaskModal()
        fetchTasks()
      } catch (error) {
        console.error("Failed to add task:", error)
      }
    }
  }

  const openEditTaskModal = (name, task) => {
    setCurrentUser(name)
    setEditingTask(task)
    setEditTaskText(task.text)
    setIsEditModalOpen(true)
  }

  const closeEditTaskModal = () => {
    setIsEditModalOpen(false)
    setEditTaskText("")
    setCurrentUser("")
    setEditingTask(null)
  }

  const editTask = async () => {
    if (editTaskText.trim() !== "") {
      try {
        const response = await fetch('/api/tasks', {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id: editingTask.id, text: editTaskText })
        })
        if (!response.ok) throw new Error('Failed to edit task')
        closeEditTaskModal()
        fetchTasks()
      } catch (error) {
        console.error("Failed to edit task:", error)
      }
    }
  }

  if (isLoading) {
    return <div className="flex justify-center items-center h-screen">Loading...</div>
  }

  if (error) {
    return <div className="flex justify-center items-center h-screen text-red-500">{error}</div>
  }

  return (
    <div className={`min-h-screen w-full ${darkMode ? "dark" : ""}`}>
      <div className="container mx-auto p-4">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-3xl font-bold">Task Manager</h1>
          <Button
            variant="outline"
            size="icon"
            onClick={() => setDarkMode(!darkMode)}
          >
            {darkMode ? "‚òÄÔ∏è" : "üåô"}
          </Button>
        </div>

        <div className="mb-8">
          <h2 className="text-2xl font-bold mb-4">Leaderboard</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {Object.entries(tasks).map(([name, userTasks]) => (
              <Card key={name}>
                <CardHeader>
                  <h3 className="text-lg font-semibold">{name}</h3>
                </CardHeader>
                <CardContent>
                  <div className="flex justify-between mb-2">
                    <span>Tasks Completed</span>
                    <span>{userTasks.filter(t => t.completed).length} / {userTasks.length}</span>
                  </div>
                  <Progress value={(userTasks.filter(t => t.completed).length / userTasks.length) * 100} />
                </CardContent>
              </Card>
            ))}
          </div>
        </div>

        <div>
          <h2 className="text-2xl font-bold mb-4">Tasks</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {Object.entries(tasks).map(([name, userTasks]) => (
              <Card key={name}>
                <CardHeader className="flex flex-row items-center justify-between">
                  <h3 className="text-lg font-semibold">{name}'s Tasks</h3>
                  <Button size="sm" onClick={() => openAddTaskModal(name)}>Add Task</Button>
                </CardHeader>
                <CardContent>
                  {userTasks.map(task => (
                    <div key={task.id} className="flex items-center justify-between py-2">
                      <div className="flex items-center">
                        <Checkbox
                          id={`task-${task.id}`}
                          checked={task.completed}
                          onCheckedChange={() => toggleTaskCompletion(name, task.id)}
                        />
                        <Label htmlFor={`task-${task.id}`} className="ml-2">{task.text}</Label>
                      </div>
                      <div>
                        <Button variant="ghost" size="sm" onClick={() => openEditTaskModal(name, task)}>Edit</Button>
                        <Button variant="ghost" size="sm" onClick={() => deleteTask(name, task.id)}>Delete</Button>
                      </div>
                    </div>
                  ))}
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </div>

      <Dialog open={isAddModalOpen} onOpenChange={setIsAddModalOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Add New Task for {currentUser}</DialogTitle>
          </DialogHeader>
          <div className="py-4">
            <Input
              value={newTaskText}
              onChange={(e) => setNewTaskText(e.target.value)}
              placeholder="Enter task description"
            />
          </div>
          <DialogFooter>
            <Button onClick={addTask}>Add Task</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Edit Task for {currentUser}</DialogTitle>
          </DialogHeader>
          <div className="py-4">
            <Input
              value={editTaskText}
              onChange={(e) => setEditTaskText(e.target.value)}
            />
          </div>
          <DialogFooter>
            <Button onClick={editTask}>Save Changes</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}
